@page
@model BoardGameDB.Pages_Games.IndexModel

@{
    ViewData["Title"] = "Index";
}

<p>
    <a class="btn btn-dark" data-bs-toggle="collapse" href="#filter_box" role="button" aria-expanded="false"
        aria-controls="filter_box">Filter</a>
    <a class="btn btn-dark" asp-page="Create">Create New</a>
</p>

@* @{
    var filterDisplay = Model.Filter.IsDirty ? "block" : "none";
    var filterPromptDisplay = Model.Filter.IsDirty ? "none" : "block";
    } *@
<div id="filter_box" class="collapse mb-3"></div>
<div id="filter_box_old" class="collapse mb-3 hidden">
    <div class="card card-body">
        <form>
            <div class="input-group mb-3">
                <label class="input-group-text">Title</label>
                <input class="form-control" type="text" asp-for="Filter.Title" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Complexity</span>
                <select class="form-control bgdb-min" asp-for="Filter.ComplexityString"
                    asp-items="@Model.ComplexityListItems"></select>
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Player Count</span>
                <input class="form-control bgdb-min" type="number" asp-for="Filter.PlayerCount" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Play Time</span>
                <select class="form-control bgdb-min" type="number" asp-for="Filter.PlayTimeRangeString"
                    asp-items="Model.Filter.PlayTimeRangeListItems"></select>
            </div>
            <div class="input-group mb-3">
                <label class="input-group-text">Test Mechanics</label>
                <div id="test_mechanics_input" class="form-control"></div>
            </div>
            <div class="input-group mb-3">
                <label class="input-group-text">Mechanics</label>
                <div id="filter_mechanics_input" class="form-control"></div>
                <div class="input-group-text">
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.MechanicsListCombinationOperation, "And", new
                        {@class="form-check-input", @id="mechanics_list_combination_operation_and"})
                        <label class="form-check-label" for="mechanics_list_combination_operation_and">And</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.MechanicsListCombinationOperation, "Or", new
                        {@class="form-check-input", @id="mechanics_list_combination_operation_or"})
                        <label class="form-check-label" for="mechanics_list_combination_operation_or">Or</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.MechanicsListCombinationOperation, "None", new
                        {@class="form-check-input", @id="mechanics_list_combination_operation_none"})
                        <label class="form-check-label" for="mechanics_list_combination_operation_none">None</label>
                    </div>
                </div>
            </div>
            <div class="input-group mb-3">
                <label class="input-group-text">Play Styles</label>
                <div id="filter_play_styles_input" class="form-control"></div>
                <div class="input-group-text">
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.PlayStylesCombinationOperation, "And", new
                        {@class="form-check-input", @id="play_styles_list_combination_operation_and"})
                        <label class="form-check-label" for="play_styles_list_combination_operation_and">And</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.PlayStylesCombinationOperation, "Or", new
                        {@class="form-check-input", @id="play_styles_list_combination_operation_or"})
                        <label class="form-check-label" for="play_styles_list_combination_operation_or">Or</label>
                    </div>
                    <div class="form-check form-check-inline">
                        @Html.RadioButtonFor(m => m.Filter.PlayStylesCombinationOperation, "None", new
                        {@class="form-check-input", @id="play_styles_list_combination_operation_none"})
                        <label class="form-check-label" for="play_styles_list_combination_operation_none">None</label>
                    </div>
                </div>
            </div>
            <div class="input-group mb-3">
                <input class="form-control btn btn-outline-primary" type="submit" value="Filter" />
            </div>
        </form>
        <form>
            <button class="form-control btn btn-outline-secondary" asp-page="./Index"
                asp-page-handler="ClearFilter">Clear</button>
        </form>
    </div>
</div>

<div id="game_list">
</div>

@section Scripts{
<script type="module">
    import TabCompleteInput from "/js/react/tab_complete.js";
    import GameList from "/js/react/game_list.js";
    import GameFilter from "/js/react/game_filter.js";

    $(function () {
        ReactDOM.createRoot(document.getElementById("filter_box"))
            .render(React.createElement(GameFilter, {
                complexityProps: {
                    name: "Filter.ComplexityString",
                    value: "@Model.Filter.ComplexityString"
                },
                playTimeProps: {
                    name: "Filter.PlayTimeRangeString",
                    value: "@Model.Filter.PlayTimeRangeString"
                },
                mechanicsProps: {
                    name: "Filter.MechanicsListString",
                    value: "@Model.Filter.MechanicsListString",
                    options: @Json.Serialize(Model.Mechanics.OrderBy(m => m))
                },
                playStyleProps: {
                    name: "Filter.PlayStylesListString",
                    value: "@Model.Filter.PlayStylesListString",
                    options: @Json.Serialize(Model.PlayStyles.OrderBy(ps => ps))
                },
                clearProps: {
                    formAction: "/Games?handler=ClearFilter"
                }
            }));

        ReactDOM.createRoot(document.getElementById("game_list"))
            .render(React.createElement(GameList, {
                games: @Json.Serialize(Model.Game),
                onGameSelected: id => window.location.assign(`/Games/Details?id=${id}`)
            }));
    });
</script>
}
